{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\rupap\\\\.vscode\\\\myapp\\\\src\\\\index.js\";\n//if you want to interpret any js code inside react code then put that js code inside curly braces like this {contacts.map()} here contacts.map() is a js code\nimport React from \"react\";\nimport ReactDOM from \"react-dom/client\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\n//importing jsx file to write inside html code\nimport Keeperapp from \"./React Components/keeperapp\";\nimport Cards from \"./React Components/props\";\nimport Main from \"./React Components/Main\";\nimport Contacts from \"./React Components/contacts\";\nimport Emojimain from \"./Challenge1/Emojimain\";\nimport Loginmain from \"./Loginpage/loginmain\";\nimport Heading from \"./React Components/Heading.jsx\";\nimport pi, { doublepi, triplepi } from \"./React Components/pi.jsx\";\n////!  or you can write// import * as pi from \"./components/pi\";\n\n// const root = ReactDOM.createRoot(document.getElementById('root'));\n// const root = ReactDOM.createRoot(document.getElementById('root'));\n// // jsx doesn't allow expressions , coz they evaluate something , instead they allow statements\n// //watch a video on expressions vs statements\n// <h1>Hello dear {`${fnmae} ${lname}`}</h1> \n// root.render(  \n//   <div>\n//     <App />\n//   </div>\n// );\n// reportWebVitals();\n// ////! styling\nconst img = \"https://picsum.photos/200\";\n\n// learnt applying custom style in jsx\n\n// ////! timing problem\nconst date = new Date(2023, 19, 2, 16); //year,month,day,hour\nconst currenttime = date.getHours();\nlet greeting;\nif (currenttime < 12) {\n  greeting = \"good morning\";\n} else if (currenttime < 18) {\n  greeting = \"good afternoon\";\n} else {\n  greeting = \"good night\";\n}\nroot.render( /*#__PURE__*/_jsxDEV(\"div\", {\n  children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n    className: \"header\",\n    children: \"Hello world\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 5\n  }, this), /*#__PURE__*/_jsxDEV(Heading, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 5\n  }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n    children: [/*#__PURE__*/_jsxDEV(\"li\", {\n      style: {\n        color: \"red\"\n      },\n      children: \"Home\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n      children: [\"About and \", pi.default]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n      children: [\"Services and \", pi.doublepi()]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n      children: [\"Contact us and \", pi.triplepi()]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n      src: img + \"?grayscale\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 5\n  }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n    children: greeting\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 5\n  }, this)]\n}, void 0, true, {\n  fileName: _jsxFileName,\n  lineNumber: 52,\n  columnNumber: 3\n}, this));\n\n////!<-----------------------------------    NOW WE WILL START CODE FOR KEEPER PROJECT  -------------------------------------->\n\n// const root = ReactDOM.createRoot(document.getElementById('root'));\n\n// root.render(\n//   <div>\n//   <Heading />\n//   <Note />\n//   <Footer />\n//   </div>\n// );\n\n////! <-------------------------------------- Props ----------------------------------7----------------->\n////! props\n////! react props are same as html attributes just there is a bit difference of syntax\n\n// const root = ReactDOM.createRoot(document.getElementById('root'));\n\n// root.render(\n//   <div>\n//   <Main />\n// </div>\n// );\n\n// reportWebVitals();\n\n////! <-------------------------------------- Props ----------------------------------7----------------->\n////! props project for challenge1\n\n// const root = ReactDOM.createRoot(document.getElementById(\"root\"));\n\n// root.render(\n//   <div>\n//     <Emojimain />\n//   </div>\n// );\n\n// reportWebVitals();\n\n////! 08-03-2023\n////! <-------------------------------------- map , filter , reduce , arrow functions----------------------------------7----------------->\n\n// //filter :\n// const newarray=[2,5,78,55,33,90];\n\n// console.log(\"Filtered elements are : \" + newarray.filter(x => x>10));\n\n// // forEach :\n// var newnumber=[];\n// const newone = newarray.forEach(x => newnumber.push(x * 2))\n// console.log(newone);\n\n// //map :\n// const newarray3=[2,5,78,55,33,90];\n\n// console.log(\"mapped elements are : \" + newarray3.map( x => x*3));\n\n// //reduce : to accumulate something inside array\n// // .reduce works as loop function which loops the function inside it\n// const numbers=[2,4,56,77,36,87];\n// console.log(\"sum of numbers array is : \" + numbers.reduce((accumulator , currentnumber) => {\n//   console.log(\"accumulator is : \" + accumulator);\n//   console.log(\"currentnumber is : \" + currentnumber);\n//   console.log(\"hello there\");\n//   return accumulator + currentnumber\n// }))\n\n// //find , findindex : finds the  first item only that matches the given condition in array and findindex finds the first index\n// const newarray4=[4,5,10,11,34,23];\n// console.log(\"element greater than 10 is : \" + newarray4.find( x => x>10));\n// console.log(\"elements index greater than 10 is : \"+ newarray4.findIndex( x => x>10));\n\n//// ! 09-03-2023\n//// ! <-------------------------------------- ternary operator and &&--------------------------------------------------->\n// //ternary operator turns an statement into expression by using it's syntax\n// //syntax : \n// //condition ? do if true : do if false\n\n// //for using && you can wrote the above line as :\n// //condition && Expression\n// //True && Expression\n// //False && Expression4\n// const root = ReactDOM.createRoot(document.getElementById(\"root\"));\n\n// root.render(\n//   <div>\n//     <Loginmain />\n//   </div>\n// );\n\n// reportWebVitals();\n\n// declarative vs imperative programming\n//declararive prog - the use of ternary operators , states , hooks\n//imperative programming -the use of pure js like :  document.getelementbyid(\"root\").innerHTML\n\n// ! 10-03-2023\n// ! <-------------------------------------- React States and Hooks--------------------------------------------------->\n// //? UI = f(state)\n////?react hooks must be called inside an component meaning like an different file than main file\n// //this method is not optimal to increase the value on screen \n// var count=0;\n\n// function increase(){\n//   count++\n\n//   const root = ReactDOM.createRoot(document.getElementById(\"root\"));\n//   root.render(\n//     <div>\n//     <h1>{count}</h1>\n//     <button onClick={increase}>+</button>\n//   </div>,\n//   );\n//   reportWebVitals();\n// }\n\n// const root = ReactDOM.createRoot(document.getElementById(\"root\"));\n// root.render(\n//   <div>\n//   <h1>{count}</h1>\n//   <button onClick={increase}>+</button>\n// </div>,\n// );\n// reportWebVitals();\n\n// //so we use hooks for an optimal way\n// import Hooks from \"./components/hooks\";\n// const root = ReactDOM.createRoot(document.getElementById(\"root\"));\n// root.render(\n//   <div>\n//   <Hooks />\n// </div>,\n// );\n// reportWebVitals();\n// //for time problem part2 in video 31 use method : setinterval(functionname , 1000ms )q\n\n// ! 11-03-2023\n// ! <--------------------------------------Destructuring , event handling , react forms--------------------------------------------------->\n//Destructuring\n\n//? const [count, setcount] = React.useState(0);\n\n// //*you can further create object literal :\n// const {countno, conunname} = count;\n\n// //*you can further give names of the objects literal\n// const {countno : num1 ,countname : string} = count;\n\n// //*you can further provide value of the objects which it will take in action if the object's value is undefined \n// const {countno = \"433\" ,countname = \"dhaval\"} = count;\n\n// //*if there is another object inside an object do this:\n//    const {countno, conuntime , counname : {fname,lname} } = count;\n\n// //Event Handling\n\n// //React Forms\n// // console.log(event.target.value);\nimport Form from \"./React Components/complexstate\";\nimport Todolist from \"./React Components/todolist\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst root = ReactDOM.createRoot(document.getElementById(\"root\"));\nroot.render( /*#__PURE__*/_jsxDEV(\"div\", {\n  children: /*#__PURE__*/_jsxDEV(Todolist, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 257,\n    columnNumber: 5\n  }, this)\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 256,\n  columnNumber: 3\n}, this));\n\n// ! 12-03-2023\n// ! <--------------------------------------Revision Complex state , spread operator , component tree--------------------------------------------------->\n//you will find the above concepts in complexstate.jsx , todolist.jsx , todoitem.jsx , hooks.jsx\n\n// ! 13-03-2023\n// ! <--------------------------------------Revision Complex state , spread operator , component tree--------------------------------------------------->\n// const root = ReactDOM.createRoot(document.getElementById('root'));\n\n// root.render(\n//   <div>\n//   <Keeperapp />\n//   </div>\n// );\n// reportWebVitals();","map":{"version":3,"names":["React","ReactDOM","App","reportWebVitals","Keeperapp","Cards","Main","Contacts","Emojimain","Loginmain","Heading","pi","doublepi","triplepi","img","date","Date","currenttime","getHours","greeting","root","render","color","default","Form","Todolist","createRoot","document","getElementById"],"sources":["C:/Users/rupap/.vscode/myapp/src/index.js"],"sourcesContent":["//if you want to interpret any js code inside react code then put that js code inside curly braces like this {contacts.map()} here contacts.map() is a js code\nimport React from \"react\";\nimport ReactDOM from \"react-dom/client\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\n//importing jsx file to write inside html code\nimport Keeperapp from \"./React Components/keeperapp\";\nimport Cards from \"./React Components/props\";\nimport Main from \"./React Components/Main\";\nimport Contacts from \"./React Components/contacts\";\nimport Emojimain from \"./Challenge1/Emojimain\";\nimport Loginmain from \"./Loginpage/loginmain\";\n\nimport Heading from \"./React Components/Heading.jsx\"\nimport pi , {doublepi,triplepi} from \"./React Components/pi.jsx\";\n////!  or you can write// import * as pi from \"./components/pi\";\n\n// const root = ReactDOM.createRoot(document.getElementById('root'));\n// const root = ReactDOM.createRoot(document.getElementById('root'));\n// // jsx doesn't allow expressions , coz they evaluate something , instead they allow statements\n// //watch a video on expressions vs statements\n// <h1>Hello dear {`${fnmae} ${lname}`}</h1> \n// root.render(  \n//   <div>\n//     <App />\n//   </div>\n// );\n// reportWebVitals();\n// ////! styling\nconst img=\"https://picsum.photos/200\";\n\n// learnt applying custom style in jsx\n\n// ////! timing problem\nconst date= new Date(2023,19,2,16);  //year,month,day,hour\nconst currenttime = date.getHours();\nlet greeting;\n\nif(currenttime < 12){\n  greeting=\"good morning\"\n}\nelse if(currenttime < 18){\n  greeting = \"good afternoon\"\n}\nelse{\n  greeting = \"good night\"\n}\n\nroot.render(\n  <div>\n    <h1 className='header'>Hello world</h1>\n    <Heading/>\n    <ul>\n      <li style={{color: \"red\"}}>Home</li>\n      <li>About and {pi.default}</li>\n      <li>Services and {pi.doublepi()}</li>\n      <li>Contact us and {pi.triplepi()}</li>\n      <br></br>\n      <img src={img + \"?grayscale\"} />\n    </ul>\n\n    <h1>{greeting}</h1>\n  </div>\n);\n\n\n\n\n////!<-----------------------------------    NOW WE WILL START CODE FOR KEEPER PROJECT  -------------------------------------->\n\n// const root = ReactDOM.createRoot(document.getElementById('root'));\n\n// root.render(\n//   <div>\n//   <Heading />\n//   <Note />\n//   <Footer />\n//   </div>\n// );\n\n\n\n\n////! <-------------------------------------- Props ----------------------------------7----------------->\n////! props\n////! react props are same as html attributes just there is a bit difference of syntax\n\n// const root = ReactDOM.createRoot(document.getElementById('root'));\n\n// root.render(\n//   <div>\n//   <Main />\n// </div>\n// );\n\n// reportWebVitals();\n\n\n\n\n////! <-------------------------------------- Props ----------------------------------7----------------->\n////! props project for challenge1\n\n// const root = ReactDOM.createRoot(document.getElementById(\"root\"));\n\n// root.render(\n//   <div>\n//     <Emojimain />\n//   </div>\n// );\n\n// reportWebVitals();\n\n\n\n////! 08-03-2023\n////! <-------------------------------------- map , filter , reduce , arrow functions----------------------------------7----------------->\n\n// //filter :\n// const newarray=[2,5,78,55,33,90];\n\n// console.log(\"Filtered elements are : \" + newarray.filter(x => x>10));\n\n\n// // forEach :\n// var newnumber=[];\n// const newone = newarray.forEach(x => newnumber.push(x * 2))\n// console.log(newone);\n\n\n\n// //map :\n// const newarray3=[2,5,78,55,33,90];\n\n// console.log(\"mapped elements are : \" + newarray3.map( x => x*3));\n\n\n// //reduce : to accumulate something inside array\n// // .reduce works as loop function which loops the function inside it\n// const numbers=[2,4,56,77,36,87];\n// console.log(\"sum of numbers array is : \" + numbers.reduce((accumulator , currentnumber) => {\n//   console.log(\"accumulator is : \" + accumulator);\n//   console.log(\"currentnumber is : \" + currentnumber);\n//   console.log(\"hello there\");\n//   return accumulator + currentnumber\n// }))\n\n// //find , findindex : finds the  first item only that matches the given condition in array and findindex finds the first index\n// const newarray4=[4,5,10,11,34,23];\n// console.log(\"element greater than 10 is : \" + newarray4.find( x => x>10));\n// console.log(\"elements index greater than 10 is : \"+ newarray4.findIndex( x => x>10));\n\n\n\n\n//// ! 09-03-2023\n//// ! <-------------------------------------- ternary operator and &&--------------------------------------------------->\n// //ternary operator turns an statement into expression by using it's syntax\n// //syntax : \n// //condition ? do if true : do if false\n\n// //for using && you can wrote the above line as :\n// //condition && Expression\n// //True && Expression\n// //False && Expression4\n// const root = ReactDOM.createRoot(document.getElementById(\"root\"));\n\n// root.render(\n//   <div>\n//     <Loginmain />\n//   </div>\n// );\n\n// reportWebVitals();\n\n\n// declarative vs imperative programming\n//declararive prog - the use of ternary operators , states , hooks\n//imperative programming -the use of pure js like :  document.getelementbyid(\"root\").innerHTML\n\n\n\n\n// ! 10-03-2023\n// ! <-------------------------------------- React States and Hooks--------------------------------------------------->\n// //? UI = f(state)\n////?react hooks must be called inside an component meaning like an different file than main file\n// //this method is not optimal to increase the value on screen \n// var count=0;\n\n// function increase(){\n//   count++\n\n//   const root = ReactDOM.createRoot(document.getElementById(\"root\"));\n//   root.render(\n//     <div>\n//     <h1>{count}</h1>\n//     <button onClick={increase}>+</button>\n//   </div>,\n//   );\n//   reportWebVitals();\n// }\n\n\n// const root = ReactDOM.createRoot(document.getElementById(\"root\"));\n// root.render(\n//   <div>\n//   <h1>{count}</h1>\n//   <button onClick={increase}>+</button>\n// </div>,\n// );\n// reportWebVitals();\n\n// //so we use hooks for an optimal way\n// import Hooks from \"./components/hooks\";\n// const root = ReactDOM.createRoot(document.getElementById(\"root\"));\n// root.render(\n//   <div>\n//   <Hooks />\n// </div>,\n// );\n// reportWebVitals();\n// //for time problem part2 in video 31 use method : setinterval(functionname , 1000ms )q\n\n\n\n// ! 11-03-2023\n// ! <--------------------------------------Destructuring , event handling , react forms--------------------------------------------------->\n//Destructuring\n\n  //? const [count, setcount] = React.useState(0);\n\n  // //*you can further create object literal :\n  // const {countno, conunname} = count;\n\n  // //*you can further give names of the objects literal\n  // const {countno : num1 ,countname : string} = count;\n\n  // //*you can further provide value of the objects which it will take in action if the object's value is undefined \n  // const {countno = \"433\" ,countname = \"dhaval\"} = count;\n\n  // //*if there is another object inside an object do this:\n  //    const {countno, conuntime , counname : {fname,lname} } = count;\n\n// //Event Handling\n\n// //React Forms\n// // console.log(event.target.value);\nimport Form from \"./React Components/complexstate\";\nimport Todolist from \"./React Components/todolist\";\nconst root = ReactDOM.createRoot(document.getElementById(\"root\"));\n\nroot.render(\n  <div>\n    <Todolist />\n  </div>\n);\n\n\n\n\n// ! 12-03-2023\n// ! <--------------------------------------Revision Complex state , spread operator , component tree--------------------------------------------------->\n//you will find the above concepts in complexstate.jsx , todolist.jsx , todoitem.jsx , hooks.jsx\n\n\n\n// ! 13-03-2023\n// ! <--------------------------------------Revision Complex state , spread operator , component tree--------------------------------------------------->\n// const root = ReactDOM.createRoot(document.getElementById('root'));\n\n// root.render(\n//   <div>\n//   <Keeperapp />\n//   </div>\n// );\n// reportWebVitals();\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}