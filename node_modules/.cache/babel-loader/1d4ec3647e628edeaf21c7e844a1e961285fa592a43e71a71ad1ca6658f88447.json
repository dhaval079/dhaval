{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\rupap\\\\.vscode\\\\NewReact\\\\src\\\\index.js\";\n//if you want to interpret any js code inside react code then put that js code inside curly braces like this {contacts.map()} here contacts.map() is a js code\nimport React from \"react\";\nimport ReactDOM from \"react-dom/client\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\n//importing jsx file to write inside html code\nimport Keeperapp from \"./React Components/keeperapp\";\nimport Cards from \"./React Components/props\";\nimport Main from \"./React Components/Main\";\nimport Contacts from \"./React Components/contacts\";\nimport Emojimain from \"./Challenge1/Emojimain\";\nimport Loginmain from \"./Loginpage/loginmain\";\nimport Hooks from \"./React Components/hooks\";\nimport FormsNew from \"./React Components/forms\";\nimport Heading from \"./React Components/Heading.jsx\";\nimport pi, { doublepi, triplepi } from \"./React Components/pi.jsx\";\n////!  or you can write// import * as pi from \"./components/pi\";\n\n// const root = ReactDOM.createRoot(document.getElementById('root'));\n// const root = ReactDOM.createRoot(document.getElementById('root'));\n// // jsx doesn't allow expressions , coz they evaluate something , instead they allow statements\n// //watch a video on expressions vs statements\n// <h1>Hello dear {`${fnmae} ${lname}`}</h1> \n// root.render(  \n//   <div>\n//     <App />\n//   </div>\n// );\n// reportWebVitals();\n// ////! styling\n// const img=\"https://picsum.photos/200\";\n\n// // learnt applying custom style in jsx\n\n// ////! timing problem\n\n// const root = ReactDOM.createRoot(document.getElementById(\"root\"))\n// const date= new Date(2023,19,2,16);  //year,month,day,hour\n// const currenttime = date.getHours();\n// let greeting;\n\n// if(currenttime < 12){\n//   greeting=\"good morning\"\n// }\n// else if(currenttime < 18){\n//   greeting = \"good afternoon\"\n// }\n// else{\n//   greeting = \"good night\"\n// }\n\n// root.render(\n//   <div>\n//     <h1 className='header'>Hello world</h1>\n//     <Heading/>\n//     <ul>\n//       <li style={{color: \"red\"}}>Home</li>\n//       <li>About and {pi.default}</li>\n//       <li>Services and {pi.doublepi()}</li>\n//       <li>Contact us and {pi.triplepi()}</li>\n//       <br></br>\n//       <img src={img + \"?grayscale\"} />\n//     </ul>\n\n//     <h1>{greeting}</h1>\n//   </div>\n// );\n\n////!<-----------------------------------    NOW WE WILL START CODE FOR KEEPER PROJECT  -------------------------------------->\n// import Footer from \"./React Components/Footer\";\n// import Note from \"./React Components/Note\";\n// const root = ReactDOM.createRoot(document.getElementById('root'));\n\n// root.render(\n//   <div>\n//   <Heading />\n//   <Note title=\"Props\" content=\"created by props\"  />\n//   <Footer />\n//   </div>\n// );\n\n////! <-------------------------------------- Props ----------------------------------7----------------->\n////! props\n////! react props are same as html attributes just there is a bit difference of syntax\n\n// const root = ReactDOM.createRoot(document.getElementById('root'));\n\n// root.render(\n//   <div>\n//   <Main />\n// </div>\n// );\n\n// reportWebVitals();\n\n////! <-------------------------------------- Props ----------------------------------7----------------->\n////! props project for challenge1\n\n// const root = ReactDOM.createRoot(document.getElementById(\"root\"));\n\n// root.render(\n//   <div>\n//     <Emojimain />\n//   </div>\n// );\n\n// reportWebVitals();\n\n////! 08-03-2023\n////! <-------------------------------------- map , filter , reduce , arrow functions----------------------------------7----------------->\n\n// //filter :\n// const newarray=[2,5,78,55,33,90];\n\n// console.log(\"Filtered elements are : \" + newarray.filter(x => x>10));\n\n// // forEach :\n// var newnumber=[];\n// const newone = newarray.forEach(x => newnumber.push(x * 2))\n// console.log(newone); \n\n// //map :\n// const newarray3=[2,5,78,55,33,90];\n\n// console.log(\"mapped elements are : \" + newarray3.map( x => x*3));\n\n// //reduce : to accumulate something inside array\n// // .reduce works as loop function which loops the function inside it\n// const numbers=[2,4,56,77,36,87];\n// console.log(\"sum of numbers array is : \" + numbers.reduce((accumulator , currentnumber) => {\n//   console.log(\"accumulator is : \" + accumulator);\n//   console.log(\"currentnumber is : \" + currentnumber);\n//   console.log(\"hello there\");\n//   return accumulator + currentnumber\n// }))\n\n// //find , findindex : finds the  first item only that matches the given condition in array and findindex finds the first index\n// const newarray4=[4,5,10,11,34,23];\n// console.log(\"element greater than 10 is : \" + newarray4.find( x => x>10));\n// console.log(\"elements index greater than 10 is : \"+ newarray4.findIndex( x => x>10));\n\n//// ! 09-03-2023\n//// ! <-------------------------------------- ternary operator and &&--------------------------------------------------->\n\n//Expressions can be assigned or used as operands, while statements can only be declared.\n//Statements create side effects to be useful, while expressions are values or execute to values.\n\n//ternary operator turns an statement into expression by using it's syntax\n//syntax : \n//condition ? do if true : do if false\n\n//for using && you can wrote the above line as :\n//condition && Expression\n//True && Expression\n//False && Expression4\n// const root = ReactDOM.createRoot(document.getElementById(\"root\"));\n\n// root.render(\n//   <div>\n//     <Loginmain />\n//   </div>\n// );\n\n// reportWebVitals();\n\n// declarative vs imperative programming\n//declararive prog - the use of ternary operators , states , hooks\n//imperative programming -the use of pure js like :  document.getelementbyid(\"root\").innerHTML\n\n// ! 10-03-2023\n// ! <-------------------------------------- React States and Hooks--------------------------------------------------->\n// //? UI = f(state)\n\n////?react hooks must be called inside an component meaning like an different file than main file\n// //this method is not optimal to increase the value on screen \n// var count=0;\n\n// function increase(){\n//   count++;\n// const root = ReactDOM.createRoot(document.getElementById(\"root\"));\n// root.render(\n//   <div>\n//   <h1>{count}</h1>  \n//   <button onClick={increase}>+</button>\n// </div>,\n// );\n// reportWebVitals();\n// }\n\n// const root = ReactDOM.createRoot(document.getElementById(\"root\"));\n// root.render(\n//   <div>\n//   <h1>{count}</h1>  \n//   <button onClick={increase}>+</button>\n// </div>,\n// );\n// reportWebVitals();\n\n// //so we use hooks for an optimal way\n// const root = ReactDOM.createRoot(document.getElementById(\"root\"));\n// root.render(\n//   <div>\n//   <Hooks />\n// </div>,\n// );\n// reportWebVitals();\n//for time problem part2 in video 31 use method : setinterval(functionname , 1000ms )q\n\n// ! 11-03-2023\n// ! <--------------------------------------Destructuring , event handling , react forms--------------------------------------------------->\n//Destructuring\n\n//? const [count, setcount] = React.useState(0);\n\n// //*you can further create object literal :\n// const {countno, conunname} = count;\n\n// //*you can further give names of the objects literal\n// const {countno : num1 ,countname : string} = count;\n\n// //*you can further provide value of the objects which it will take in action if the object's value is undefined \n// const {countno = \"433\" ,countname = \"dhaval\"} = count;\n\n// //*if there is another object inside an object do this:\n//    const {countno, conuntime , counname : {fname,lname} } = count;\n//    const [cat,dog] =animals;\n//    destructure an object named cat\n//    const {name =\"fluffy\" , sound=\"meow\"} = cat\n\n// function useAnimals(animals){\n//   return [\n//     animals.name,\n//     function(){\n//         console.log(animals.sound);\n//     }\n//   ] ;\n// }\n// const [animal,makesound] =useAnimals(cat)\n// console.log(animal) --> cat\n// makesound() --> prints meow\n// //Event Handling\n\n// //React Forms\n// // console.log(event.target.value);\n\n// import Form from \"./React Components/complexstate\";\n// import Todolist from \"./React Components/todolist\";\n// const root = ReactDOM.createRoot(document.getElementById(\"root\"));\n\n// root.render(\n//   <div>\n//     <Todolist />\n//   </div>\n// );\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst root = ReactDOM.createRoot(document.getElementById(\"root\"));\nroot.render( /*#__PURE__*/_jsxDEV(\"div\", {\n  children: /*#__PURE__*/_jsxDEV(FormsNew, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 283,\n    columnNumber: 5\n  }, this)\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 282,\n  columnNumber: 3\n}, this));\nreportWebVitals();\n\n// ! 12-03-2023\n// ! <--------------------------------------Revision Complex state , spread operator , component tree--------------------------------------------------->\n//you will find the above concepts in complexstate.jsx , todolist.jsx , todoitem.jsx , hooks.jsx\n\n// ! 13-03-2023\n// ! <--------------------------------------Revision Complex state , spread operator , component tree--------------------------------------------------->\n// const root = ReactDOM.createRoot(document.getElementById('root'));\n\n// root.render(\n//   <div>\n//   <Keeperapp />\n//   </div>\n// );\n// reportWebVitals();","map":{"version":3,"names":["React","ReactDOM","App","reportWebVitals","Keeperapp","Cards","Main","Contacts","Emojimain","Loginmain","Hooks","FormsNew","Heading","pi","doublepi","triplepi","root","createRoot","document","getElementById","render"],"sources":["C:/Users/rupap/.vscode/NewReact/src/index.js"],"sourcesContent":["//if you want to interpret any js code inside react code then put that js code inside curly braces like this {contacts.map()} here contacts.map() is a js code\nimport React from \"react\";\nimport ReactDOM from \"react-dom/client\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\n//importing jsx file to write inside html code\nimport Keeperapp from \"./React Components/keeperapp\";\nimport Cards from \"./React Components/props\";\nimport Main from \"./React Components/Main\";\nimport Contacts from \"./React Components/contacts\";\nimport Emojimain from \"./Challenge1/Emojimain\";\nimport Loginmain from \"./Loginpage/loginmain\";\nimport Hooks from \"./React Components/hooks\";\nimport FormsNew from \"./React Components/forms\";\nimport Heading from \"./React Components/Heading.jsx\"\nimport pi , {doublepi,triplepi} from \"./React Components/pi.jsx\";\n////!  or you can write// import * as pi from \"./components/pi\";\n\n// const root = ReactDOM.createRoot(document.getElementById('root'));\n// const root = ReactDOM.createRoot(document.getElementById('root'));\n// // jsx doesn't allow expressions , coz they evaluate something , instead they allow statements\n// //watch a video on expressions vs statements\n// <h1>Hello dear {`${fnmae} ${lname}`}</h1> \n// root.render(  \n//   <div>\n//     <App />\n//   </div>\n// );\n// reportWebVitals();\n// ////! styling\n// const img=\"https://picsum.photos/200\";\n\n// // learnt applying custom style in jsx\n\n// ////! timing problem\n\n// const root = ReactDOM.createRoot(document.getElementById(\"root\"))\n// const date= new Date(2023,19,2,16);  //year,month,day,hour\n// const currenttime = date.getHours();\n// let greeting;\n\n// if(currenttime < 12){\n//   greeting=\"good morning\"\n// }\n// else if(currenttime < 18){\n//   greeting = \"good afternoon\"\n// }\n// else{\n//   greeting = \"good night\"\n// }\n\n// root.render(\n//   <div>\n//     <h1 className='header'>Hello world</h1>\n//     <Heading/>\n//     <ul>\n//       <li style={{color: \"red\"}}>Home</li>\n//       <li>About and {pi.default}</li>\n//       <li>Services and {pi.doublepi()}</li>\n//       <li>Contact us and {pi.triplepi()}</li>\n//       <br></br>\n//       <img src={img + \"?grayscale\"} />\n//     </ul>\n\n//     <h1>{greeting}</h1>\n//   </div>\n// );\n\n\n\n////!<-----------------------------------    NOW WE WILL START CODE FOR KEEPER PROJECT  -------------------------------------->\n// import Footer from \"./React Components/Footer\";\n// import Note from \"./React Components/Note\";\n// const root = ReactDOM.createRoot(document.getElementById('root'));\n\n// root.render(\n//   <div>\n//   <Heading />\n//   <Note title=\"Props\" content=\"created by props\"  />\n//   <Footer />\n//   </div>\n// );\n\n\n\n\n////! <-------------------------------------- Props ----------------------------------7----------------->\n////! props\n////! react props are same as html attributes just there is a bit difference of syntax\n\n// const root = ReactDOM.createRoot(document.getElementById('root'));\n\n// root.render(\n//   <div>\n//   <Main />\n// </div>\n// );\n\n// reportWebVitals();\n\n\n\n\n////! <-------------------------------------- Props ----------------------------------7----------------->\n////! props project for challenge1\n\n// const root = ReactDOM.createRoot(document.getElementById(\"root\"));\n\n// root.render(\n//   <div>\n//     <Emojimain />\n//   </div>\n// );\n\n// reportWebVitals();\n\n\n\n////! 08-03-2023\n////! <-------------------------------------- map , filter , reduce , arrow functions----------------------------------7----------------->\n\n// //filter :\n// const newarray=[2,5,78,55,33,90];\n\n// console.log(\"Filtered elements are : \" + newarray.filter(x => x>10));\n\n\n// // forEach :\n// var newnumber=[];\n// const newone = newarray.forEach(x => newnumber.push(x * 2))\n// console.log(newone); \n\n\n\n// //map :\n// const newarray3=[2,5,78,55,33,90];\n\n// console.log(\"mapped elements are : \" + newarray3.map( x => x*3));\n\n\n// //reduce : to accumulate something inside array\n// // .reduce works as loop function which loops the function inside it\n// const numbers=[2,4,56,77,36,87];\n// console.log(\"sum of numbers array is : \" + numbers.reduce((accumulator , currentnumber) => {\n//   console.log(\"accumulator is : \" + accumulator);\n//   console.log(\"currentnumber is : \" + currentnumber);\n//   console.log(\"hello there\");\n//   return accumulator + currentnumber\n// }))\n\n// //find , findindex : finds the  first item only that matches the given condition in array and findindex finds the first index\n// const newarray4=[4,5,10,11,34,23];\n// console.log(\"element greater than 10 is : \" + newarray4.find( x => x>10));\n// console.log(\"elements index greater than 10 is : \"+ newarray4.findIndex( x => x>10));\n\n\n\n//// ! 09-03-2023\n//// ! <-------------------------------------- ternary operator and &&--------------------------------------------------->\n\n//Expressions can be assigned or used as operands, while statements can only be declared.\n//Statements create side effects to be useful, while expressions are values or execute to values.\n\n//ternary operator turns an statement into expression by using it's syntax\n//syntax : \n//condition ? do if true : do if false\n\n//for using && you can wrote the above line as :\n//condition && Expression\n//True && Expression\n//False && Expression4\n// const root = ReactDOM.createRoot(document.getElementById(\"root\"));\n\n// root.render(\n//   <div>\n//     <Loginmain />\n//   </div>\n// );\n\n// reportWebVitals();\n\n\n// declarative vs imperative programming\n//declararive prog - the use of ternary operators , states , hooks\n//imperative programming -the use of pure js like :  document.getelementbyid(\"root\").innerHTML\n\n\n\n\n// ! 10-03-2023\n// ! <-------------------------------------- React States and Hooks--------------------------------------------------->\n// //? UI = f(state)\n\n////?react hooks must be called inside an component meaning like an different file than main file\n// //this method is not optimal to increase the value on screen \n// var count=0;\n\n// function increase(){\n//   count++;\n// const root = ReactDOM.createRoot(document.getElementById(\"root\"));\n// root.render(\n//   <div>\n//   <h1>{count}</h1>  \n//   <button onClick={increase}>+</button>\n// </div>,\n// );\n// reportWebVitals();\n// }\n\n// const root = ReactDOM.createRoot(document.getElementById(\"root\"));\n// root.render(\n//   <div>\n//   <h1>{count}</h1>  \n//   <button onClick={increase}>+</button>\n// </div>,\n// );\n// reportWebVitals();\n\n// //so we use hooks for an optimal way\n// const root = ReactDOM.createRoot(document.getElementById(\"root\"));\n// root.render(\n//   <div>\n//   <Hooks />\n// </div>,\n// );\n// reportWebVitals();\n//for time problem part2 in video 31 use method : setinterval(functionname , 1000ms )q\n\n\n\n// ! 11-03-2023\n// ! <--------------------------------------Destructuring , event handling , react forms--------------------------------------------------->\n//Destructuring\n\n  //? const [count, setcount] = React.useState(0);\n\n  // //*you can further create object literal :\n  // const {countno, conunname} = count;\n\n  // //*you can further give names of the objects literal\n  // const {countno : num1 ,countname : string} = count;\n\n  // //*you can further provide value of the objects which it will take in action if the object's value is undefined \n  // const {countno = \"433\" ,countname = \"dhaval\"} = count;\n\n  // //*if there is another object inside an object do this:\n  //    const {countno, conuntime , counname : {fname,lname} } = count;\n  //    const [cat,dog] =animals;\n  //    destructure an object named cat\n  //    const {name =\"fluffy\" , sound=\"meow\"} = cat\n\n    // function useAnimals(animals){\n    //   return [\n    //     animals.name,\n    //     function(){\n    //         console.log(animals.sound);\n    //     }\n    //   ] ;\n    // }\n    // const [animal,makesound] =useAnimals(cat)\n    // console.log(animal) --> cat\n    // makesound() --> prints meow\n// //Event Handling\n\n// //React Forms\n// // console.log(event.target.value);\n\n// import Form from \"./React Components/complexstate\";\n// import Todolist from \"./React Components/todolist\";\n// const root = ReactDOM.createRoot(document.getElementById(\"root\"));\n\n// root.render(\n//   <div>\n//     <Todolist />\n//   </div>\n// );\n\nconst root = ReactDOM.createRoot(document.getElementById(\"root\"))\nroot.render(\n  <div>\n    <FormsNew />\n  </div>\n)\nreportWebVitals();\n\n// ! 12-03-2023\n// ! <--------------------------------------Revision Complex state , spread operator , component tree--------------------------------------------------->\n//you will find the above concepts in complexstate.jsx , todolist.jsx , todoitem.jsx , hooks.jsx\n\n\n\n// ! 13-03-2023\n// ! <--------------------------------------Revision Complex state , spread operator , component tree--------------------------------------------------->\n// const root = ReactDOM.createRoot(document.getElementById('root'));\n\n// root.render(\n//   <div>\n//   <Keeperapp />\n//   </div>\n// );\n// reportWebVitals();\n\n"],"mappings":";AAAA;AACA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,QAAQ,MAAM,kBAAkB;AACvC,OAAO,aAAa;AACpB,OAAOC,GAAG,MAAM,OAAO;AACvB,OAAOC,eAAe,MAAM,mBAAmB;;AAE/C;AACA,OAAOC,SAAS,MAAM,8BAA8B;AACpD,OAAOC,KAAK,MAAM,0BAA0B;AAC5C,OAAOC,IAAI,MAAM,yBAAyB;AAC1C,OAAOC,QAAQ,MAAM,6BAA6B;AAClD,OAAOC,SAAS,MAAM,wBAAwB;AAC9C,OAAOC,SAAS,MAAM,uBAAuB;AAC7C,OAAOC,KAAK,MAAM,0BAA0B;AAC5C,OAAOC,QAAQ,MAAM,0BAA0B;AAC/C,OAAOC,OAAO,MAAM,gCAAgC;AACpD,OAAOC,EAAE,IAAIC,QAAQ,EAACC,QAAQ,QAAO,2BAA2B;AAChE;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAIA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAKA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAKA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAIA;AACA;;AAEA;AACA;;AAEA;;AAGA;AACA;AACA;AACA;;AAIA;AACA;;AAEA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAIA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAGA;AACA;AACA;;AAKA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAIA;AACA;AACA;;AAEE;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACJ;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AAAA;AAEA,MAAMC,IAAI,GAAGf,QAAQ,CAACgB,UAAU,CAACC,QAAQ,CAACC,cAAc,CAAC,MAAM,CAAC,CAAC;AACjEH,IAAI,CAACI,MAAM,eACT;EAAA,uBACE,QAAC,QAAQ;IAAA;IAAA;IAAA;EAAA;AAAG;EAAA;EAAA;EAAA;AAAA,QACR,CACP;AACDjB,eAAe,EAAE;;AAEjB;AACA;AACA;;AAIA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}