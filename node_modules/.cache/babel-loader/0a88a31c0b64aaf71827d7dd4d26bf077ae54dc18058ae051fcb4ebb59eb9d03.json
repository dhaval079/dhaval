{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\rupap\\\\.vscode\\\\myapp\\\\src\\\\React Components\\\\complexstate.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\n\n// function Form(){\n//     // use of hooks\n//     const [fname,setfname] =  useState(\"\");\n//     const [lname,setlname] =  useState(\"\");\n\n//     //use of event handling\n// function updatefname(event){\n//     setfname(event.target.value);\n// }\n// function updatelname(event){\n//     setlname(event.target.value);\n// } \n\n//     return (\n//         <div>\n//             <h1>hello {fname} {lname}</h1>\n//             <form>\n//                 <input name=\"fname\" type=\"text\" onChange={updatefname} placeholder=\"First Name\" value={fname}/>\n//                 <input name=\"lname\" type=\"text\" onChange={updatelname} placeholder=\"Last Name\" value={lname} />\n//             </form>\n//         </div>\n\n//     )\n// }\n// //?you can do the above method or you can do another simplified method for a code with many functions \n\n//program for complex state\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Form() {\n  _s();\n  // use of hooks\n  const [fullname, setfullname] = useState({\n    fname: \"\",\n    lname: \"\"\n  });\n\n  //use of event handling\n  function updatefullname(event) {\n    //destructuring of const newvalue and const inputvalue\n    const {\n      value,\n      name\n    } = event.target;\n    console.log(value);\n    console.log(name);\n    // setfullname(prevalue =>{\n    //     if(name==\"fname\"){\n    //         return{\n    //         fname : value,\n    //         lname : prevalue.lname\n    //         }\n    //     } \n    //     else if(name==\"lname\"){\n    //         return{\n    //             fname : prevalue.fname,\n    //             lname : value\n    //             }\n    //     }\n    // });\n    //if you don't want to use the if else statements you can use the spread operators below :\n    setfullname(prevalue => {\n      return {\n        ...prevalue,\n        name: value\n      };\n    });\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: [\"hello  \", fullname.fname, \" \", fullname.lname]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        name: \"fname\",\n        type: \"text\",\n        onChange: updatefullname,\n        placeholder: \"First Name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        name: \"lname\",\n        type: \"text\",\n        onChange: updatefullname,\n        placeholder: \"Last Name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 74,\n    columnNumber: 9\n  }, this);\n}\n_s(Form, \"C0xDiNLgvd4VC01fSBOh8CJaJPY=\");\n_c = Form;\nexport default Form;\nvar _c;\n$RefreshReg$(_c, \"Form\");","map":{"version":3,"names":["React","useState","Form","fullname","setfullname","fname","lname","updatefullname","event","value","name","target","console","log","prevalue"],"sources":["C:/Users/rupap/.vscode/myapp/src/React Components/complexstate.jsx"],"sourcesContent":["import React ,{useState} from \"react\";\r\n\r\n// function Form(){\r\n//     // use of hooks\r\n//     const [fname,setfname] =  useState(\"\");\r\n//     const [lname,setlname] =  useState(\"\");\r\n    \r\n//     //use of event handling\r\n// function updatefname(event){\r\n//     setfname(event.target.value);\r\n// }\r\n// function updatelname(event){\r\n//     setlname(event.target.value);\r\n// } \r\n\r\n\r\n//     return (\r\n//         <div>\r\n//             <h1>hello {fname} {lname}</h1>\r\n//             <form>\r\n//                 <input name=\"fname\" type=\"text\" onChange={updatefname} placeholder=\"First Name\" value={fname}/>\r\n//                 <input name=\"lname\" type=\"text\" onChange={updatelname} placeholder=\"Last Name\" value={lname} />\r\n//             </form>\r\n//         </div>\r\n\r\n//     )\r\n// }\r\n// //?you can do the above method or you can do another simplified method for a code with many functions \r\n\r\n\r\n//program for complex state\r\n\r\nfunction Form(){\r\n    // use of hooks\r\n    const [fullname,setfullname] =  useState({\r\n        fname:\"\",\r\n        lname:\"\"\r\n    });\r\n    \r\n    //use of event handling\r\nfunction updatefullname(event){\r\n    //destructuring of const newvalue and const inputvalue\r\n    const {value,name}=event.target;\r\n    console.log(value);\r\n    console.log(name);\r\n    // setfullname(prevalue =>{\r\n    //     if(name==\"fname\"){\r\n    //         return{\r\n    //         fname : value,\r\n    //         lname : prevalue.lname\r\n    //         }\r\n    //     } \r\n    //     else if(name==\"lname\"){\r\n    //         return{\r\n    //             fname : prevalue.fname,\r\n    //             lname : value\r\n    //             }\r\n    //     }\r\n    // });\r\n    //if you don't want to use the if else statements you can use the spread operators below :\r\n    setfullname(prevalue =>{\r\n        return {\r\n       ...prevalue,\r\n       name : value\r\n        }\r\n    });\r\n\r\n\r\n}\r\n\r\n\r\n\r\n    return (\r\n        <div>\r\n            <h1>hello  {fullname.fname} {fullname.lname}</h1>\r\n            <form>\r\n                <input  name=\"fname\" type=\"text\" onChange={updatefullname} placeholder=\"First Name\" />\r\n                <input  name=\"lname\" type=\"text\" onChange={updatefullname} placeholder=\"Last Name\"  />\r\n            </form>\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nexport default Form;"],"mappings":";;AAAA,OAAOA,KAAK,IAAGC,QAAQ,QAAO,OAAO;;AAErC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAGA;AAAA;AAEA,SAASC,IAAI,GAAE;EAAA;EACX;EACA,MAAM,CAACC,QAAQ,EAACC,WAAW,CAAC,GAAIH,QAAQ,CAAC;IACrCI,KAAK,EAAC,EAAE;IACRC,KAAK,EAAC;EACV,CAAC,CAAC;;EAEF;EACJ,SAASC,cAAc,CAACC,KAAK,EAAC;IAC1B;IACA,MAAM;MAACC,KAAK;MAACC;IAAI,CAAC,GAACF,KAAK,CAACG,MAAM;IAC/BC,OAAO,CAACC,GAAG,CAACJ,KAAK,CAAC;IAClBG,OAAO,CAACC,GAAG,CAACH,IAAI,CAAC;IACjB;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACAN,WAAW,CAACU,QAAQ,IAAG;MACnB,OAAO;QACR,GAAGA,QAAQ;QACXJ,IAAI,EAAGD;MACN,CAAC;IACL,CAAC,CAAC;EAGN;EAII,oBACI;IAAA,wBACI;MAAA,WAAI,SAAO,EAACN,QAAQ,CAACE,KAAK,EAAC,GAAC,EAACF,QAAQ,CAACG,KAAK;IAAA;MAAA;MAAA;MAAA;IAAA,QAAM,eACjD;MAAA,wBACI;QAAQ,IAAI,EAAC,OAAO;QAAC,IAAI,EAAC,MAAM;QAAC,QAAQ,EAAEC,cAAe;QAAC,WAAW,EAAC;MAAY;QAAA;QAAA;QAAA;MAAA,QAAG,eACtF;QAAQ,IAAI,EAAC,OAAO;QAAC,IAAI,EAAC,MAAM;QAAC,QAAQ,EAAEA,cAAe;QAAC,WAAW,EAAC;MAAW;QAAA;QAAA;QAAA;MAAA,QAAI;IAAA;MAAA;MAAA;MAAA;IAAA,QACnF;EAAA;IAAA;IAAA;IAAA;EAAA,QACL;AAGd;AAAC,GAlDQL,IAAI;AAAA,KAAJA,IAAI;AAoDb,eAAeA,IAAI;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}